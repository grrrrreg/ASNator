{"name":"ASNator","tagline":"Small Python+Flask API using team-cymru.com's bgp based whois server to return AS name and AS Country Code for a given ASN","body":"ASNator\r\n=======\r\n\r\nSmall Python+Flask API using team-cymru.com's bgp based whois server to return AS name and AS Country Code for a given ASN\r\nPlease read the disclaimer below as it it a prototype that has a lot of design and usage caveats because of both relying on Flask and on a whois server which might not be sized for a massively called API\r\n\r\n## Requirements\r\nPython module requirements are listed in a pip freeze output under requirements.txt attached to this repo\r\nTo isntall the dependencies:\r\n```\r\npip install -r requirements.txt\r\n```\r\n> at some point in a distant future I will try and package it...\r\n\r\n## Using ASNator\r\nASNator can either be used:\r\n- as a standalone web API\r\n- as a module giving you access to useful functions: (via ```import asntool```)\r\n\t- ```netcat(host,port,read_size)```\r\n\t- ```getAsnDetails(asnList=list())``` : uses netcat above to query Cymru for ASN details\r\n\t- ```isValidAutNum(aut_Num)```: tells you if an (int) ASN is valid or not according to 16 adn 32 bit ASNs allocations - handy for filter() functional programming \r\n\r\n## API mode usage example:\r\n### json output mode\r\nBy default, the output *content-type* is a valid *application/json*, the command below gives an input, showing a request that has been issued with both valid and invalid aut-nums  \r\n\r\n#### RESTful mode using /asn/?query=<as1>,<as2> ....\r\n```curl http://127.0.0.1:8080/asn/?query=41690,29169 | jq .```\r\n\r\nReturns:\r\n```json\r\n{\r\n  \"error\": [],\r\n  \"success\": [\r\n    {\r\n      \"AS_Description\": \"Dailymotion S.A.\",\r\n      \"AS_Country_Code\": \"FR\",\r\n      \"AS_Autnum\": 41690\r\n    },\r\n    {\r\n      \"AS_Description\": \"Gandi SAS\",\r\n      \"AS_Country_Code\": \"FR\",\r\n      \"AS_Autnum\": 29169\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n#### loosely RESTful (aka, not RESTful, for realz) using /asn/<as1>,<as2>...\r\n```curl http://127.0.0.1:8080/asn/65637,5000000000,12822,5511/ | jq .```\r\n*(using the awesome <a href='http://stedolan.github.io/jq/'>jq</a> to prettyprint the output of curl, has no relevance with ASNTool itself, but is a crazy good tool for REST devs)*.\r\n\r\nReturns:\r\n```json\r\n{\r\n  \"error\": [\r\n    {\r\n      \"AS_Description\": \"invalid aut-num\",\r\n      \"AS_Country_Code\": \"n/a\",\r\n      \"ASN_Autnum\": \"65637\"\r\n    },\r\n    {\r\n      \"AS_Description\": \"invalid aut-num\",\r\n      \"AS_Country_Code\": \"n/a\",\r\n      \"ASN_Autnum\": \"5000000000\"\r\n    }\r\n  ],\r\n  \"success\": [\r\n    {\r\n      \"AS_Description\": \"LYNET Kommunikation AG\",\r\n      \"AS_Country_Code\": \"DE\",\r\n      \"AS_Autnum\": 12822\r\n    },\r\n    {\r\n      \"AS_Description\": \"Orange S.A.\",\r\n      \"AS_Country_Code\": \"FR\",\r\n      \"AS_Autnum\": 5511\r\n    }\r\n  ]\r\n}\r\n```\r\n#### validate AS Numbers\r\nThe ```?action=validate``` will allow you to validate if an ASN is valid or not, and if it has been allocted or not.\r\n```\r\ncurl http://127.0.0.1:8080/asn/65637,5000000000,12322,3215,tata/?action=validate\r\n```\r\nWill give you that answer:\r\n```json\r\n{\r\n    \"3215\": true,\r\n    \"12322\": true,\r\n    \"65637\": false,\r\n    \"tata\": false,\r\n    \"5000000000\": false\r\n}\r\n```\r\n> **note: ** AS like AS1234567 are valid from a RIR standpoint (RIPE, ARIN...), but are not allocated, these will be marked as valid (i.e. value for a \"success\" key in a reponse json, and will be validated by the ```?action=validate``` option\r\n\r\n#### .csv format\r\ncsv format (Excel readable) is provided through the ?format=csv queryArg, as displayed in the example below.\r\n```\r\ncurl http://127.0.0.1:8080/asn/65637,5000000000,12822,5511/?format=csv\r\n```\r\nWill give you the following CSV file:\r\n\r\n|is_AS_Valid\t|AS_Description\t|AS_Autnum\t|AS_Country            |\r\n|---------------|---------------|---------------|----------------------|\r\n|SUCCESS\t|12822  \t|DE\t        |LYNET Kommunikation AG|\r\n|SUCCESS\t|5511\t        |FR\t        |Orange S.A.           |\r\n|ERROR\t        |65637\t        |n/a\t        |invalid aut-num       |\r\n|ERROR\t        |5000000000\t|n/a\t        |invalid aut-num       |\r\n\r\n## Using as a module\r\nAll functions are available when importing asntool as a module, examples below.\r\n\r\n```python \r\n>>> import asntool\r\n>>> asList = asntool.getAsDetails([65637,5000000000,12822,5511])\r\n>>> import json\r\n>>> print json.dumps(asList, sort_keys=True, indent=4)\r\n{\r\n    \"error\": [\r\n        {\r\n            \"ASN_Autnum\": \"65637\", \r\n            \"AS_Country_Code\": \"n/a\", \r\n            \"AS_Description\": \"invalid aut-num\"\r\n        }, \r\n        {\r\n            \"ASN_Autnum\": \"5000000000\", \r\n            \"AS_Country_Code\": \"n/a\", \r\n            \"AS_Description\": \"invalid aut-num\"\r\n        }\r\n    ], \r\n    \"success\": [\r\n        {\r\n            \"AS_Autnum\": 12822, \r\n            \"AS_Country_Code\": \"DE\", \r\n            \"AS_Description\": \"LYNET Kommunikation AG\"\r\n        }, \r\n        {\r\n            \"AS_Autnum\": 5511, \r\n            \"AS_Country_Code\": \"FR\", \r\n            \"AS_Description\": \"Orange S.A.\"\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\nOr if you want to check if an aut-num is valid:\r\n```python\r\n>>> import asntool\r\n>>> if not asntool.isValidAutNum(65636):\r\n...     print \"AS65636 IS INVALID - side note: it is a private AS\"\r\n... \r\nAS65636 IS INVALID - side note: it is a private AS\r\n```\r\nYou can also use the ```?action=check``` queryArg if you want to figure out which ASNs within a list are valid:\r\n```\r\ncurl http://127.0.0.1:8080/asn/65637,5000000000,12322,3215,tata/?action=validate\r\n```\r\nWill give you that answer:\r\n```json\r\n{\r\n\"3215\": true,\r\n\"12322\": true,\r\n\"65637\": false,\r\n\"tata\": false,\r\n\"5000000000\": false\r\n}\r\n```\r\n\r\n## Error handling\r\n### Querying for invalid ASNs\r\nThe HTTP Rest API will generate an HTTP Error and return a body detailing the error in case all queried ASNs are invalid.\r\n```\r\ncurl http://127.0.0.1:8080/asn/131071,65539/\r\n```\r\nWill return an HTTP_421 error:\r\n```json\r\n{\r\n\"error_code\": \"421\",\r\n\"error_descr\": \"GET_AS_DETAILS().INVALID_ASN_LIST_ERROR: 131071, 65539\"\r\n}\r\n``` \r\n### Malformed whois.cymru.com\r\nA runTimeError exception is also in place to detect malformed whois responses:\r\n```python\r\n\texcept RuntimeError, e:\r\n\t\terrorResponse =  make_response(json.dumps({'error_code':'420', 'error_descr':str(e)}), 420)\r\n\t\terrorResponse.headers['content-type'] = 'application/json'\r\n\t\treturn errorResponse\r\n```\r\n\r\n### Socket errors\r\nerrors due to the ```netcat()``` function misbehaving are also taken into account and forwarded as ```socket.error``` and ```socket.gaierror``` with an \r\nindication on whether they are *CREATE*, *CONNECT*, *ADDRESS*, *SEND* and *RECEIVE* errors. The HTTP API catches them and sends an HTTP_41x error with an error message identifying the socket action causing triggering the exception.\r\n\r\n## To Do\r\n- memoize w/ decorators to avoid having to hit whois.cymru.com unnecessarily\r\n- memoize spliting an array-of-ASNs argument into multiple single ASNs so that all individual ASNs get cached\r\n- logging\r\n- installer\r\n\r\n## Disclaimer: \r\nthis code is for a proto - Flask is not Async, which means it can only serve one concurrent user at a time\r\nideally, it should:\r\n- not use WerkZeug but Tornado or some WGSI capable\r\n- current config runs on localhost:8080, change that in the main loop if you want\r\n\r\n## Credits:\r\n-  uses Team Cymru's awesome WHOIS, look at http://www.team-cymru.org/Services/ip-to-asn.html for more details\r\n\r\n## Warning: \r\nplease let CYMRU know if this is going to be used in prod and/or intend to massively query their whois.\r\nIn which case it is strongly advised to implement some flavor of caching\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}